apply plugin: "application"
apply plugin: "codenarc"
apply plugin: "groovy"
apply plugin: "com.gradle.build-scan"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.asciidoctor.convert"
apply plugin: "org.springframework.boot"

mainClassName = "sample.ExampleGreetingsApplication"

buildscript {
    repositories {
//        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath "com.gradle:build-scan-plugin:2.0.2"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorVersion"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

dependencies {
    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${springRestDocsVersion}"

    compile "org.codehaus.groovy:groovy-all:2.5.2"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion"

    compile 'javax.xml.bind:jaxb-api:2.3.0'
    runtime 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    runtime 'com.sun.xml.bind:jaxb-impl:2.3.0.1'
    runtime 'javax.activation:activation:1.1.1'

    testCompile "io.projectreactor:reactor-test"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "org.spockframework:spock-spring:${spockVersion}"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.restdocs:spring-restdocs-webtestclient:${springRestDocsVersion}"

}

ext {
    snippetsDir = "$buildDir/generated-snippets"
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test

    doLast {
        copy {
            from "$buildDir/asciidoc"
            into "$buildDir/resources/main/public"
            include "**/*.html"
        }
    }
}

clean {
    delete fileTree(dir: "src/main/resources/public")
}

build {
    dependsOn asciidoctor
}

codenarc {
    toolVersion = "1.2.1"
}

codenarcMain {
    ignoreFailures false
    configFile file("gradle/codenarc/codenarc.groovy")
}

codenarcTest {
    configFile file("gradle/codenarc/codenarcTest.groovy")
}

task publish(type: GradleBuild) {
    dependsOn asciidoctor
    buildFile = file("publish.gradle")
    tasks = ["gitPublishPush"]
}

ext["spring-restdocs.version"] = springRestDocsVersion

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"
    publishAlways()
}

ext['groovy.version'] = '2.5.4'

if (JavaVersion.current().isJava9Compatible()) {
    def jaxbJvmArgs = ['--add-modules', 'java.xml.bind']
    tasks.withType(GroovyCompile) {
        groovyOptions.fork = true
        groovyOptions.forkOptions.jvmArgs.addAll(jaxbJvmArgs)
    }
    tasks.withType(Test) {
        jvmArgs jaxbJvmArgs
    }
}

